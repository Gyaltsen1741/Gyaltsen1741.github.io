[
  {
    "objectID": "Mini_Project2.html",
    "href": "Mini_Project2.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All CodeView Source"
  },
  {
    "objectID": "Mini_Project2.html#introduction",
    "href": "Mini_Project2.html#introduction",
    "title": "",
    "section": "Introduction",
    "text": "Introduction\nIn this project, we explored soccer statistics from multiple professional football leagues using data from FBref – MLS Stats, a trusted site for advanced football analytics. While we initially focused on Major League Soccer (MLS), we extended our analysis to include other major international competitions such as the Premier League, La Liga, Bundesliga, and Serie A.\nOur goal was to collect and organize standardized squad-level statistics across leagues to support comparative analysis. Specifically, we targeted the “Squad Standard Stats” tables on each competition’s main stats page. These tables contain information on team performance metrics such as matches played, goals, assists, average age, possession %, and more."
  },
  {
    "objectID": "Mini_Project2.html#motivation",
    "href": "Mini_Project2.html#motivation",
    "title": "",
    "section": "Motivation",
    "text": "Motivation\nWe chose this dataset primarily out of personal interest: one of us enjoys following global football news, while the other is an avid FC25 player. Beyond our curiosity, we recognized that this data offers a rich opportunity for cross-league comparisons.\nBy scraping the same type of statistics from each league, we aimed to answer questions such as:\n\nDo older squads tend to score more or less?\nIs there a relationship between average age and possession percentage?\nHow does team performance (e.g., goals, assists) vary across leagues?\n\nThese questions open the door for future data visualizations (like scatterplots or heatmaps) and statistical modeling (e.g., regression of goals on age or possession).\nTo acquire the data, we used a custom scraping function along with an iteration technique (pmap) to systematically collect comparable squad stats from each league’s respective webpage. This ensures consistency while handling slight variations in webpage structure — such as differing table positions."
  },
  {
    "objectID": "Mini_Project2.html#scraping-the-squad-standard-stats-table",
    "href": "Mini_Project2.html#scraping-the-squad-standard-stats-table",
    "title": "",
    "section": "Scraping the “Squad Standard Stats” Table",
    "text": "Scraping the “Squad Standard Stats” Table\nTo begin, we manually scrape the Major League Soccer (MLS) stats page using rvest. This allows us to locate and inspect the structure of all tables on the page, which helps identify the correct table containing squad-level statistics.\nOnce we confirm the correct table is loaded (in this case, table 5), we clean it by promoting the first row to column headers, standardizing names, and parsing numeric columns. This results in a tidy dataset ready for analysis.\n\n\nHide Code\nlibrary(rvest)\nlibrary(janitor)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(stringr)\nlibrary(readr)\n\n# Check permissions for the specific stats page\nrobotstxt::paths_allowed(\"https://fbref.com/en/comps/22/Major-League-Soccer-Stats\")\n\n\n[1] TRUE\n\n\nHide Code\n# Step 1: Read the page with rvest\nMLS_table &lt;- read_html(\"https://fbref.com/en/comps/22/Major-League-Soccer-Stats\")\n\n\n\n\nHide Code\n# Step 2: Extract tables from the page\nSquad &lt;- html_nodes(MLS_table, \"table\")\nhtml_table(Squad, header = TRUE, fill = TRUE)  # find right table\n\n\n\n\nHide Code\n# Step 3: Extract the correct table (the fifth table on the page)\nSquad2 &lt;- html_table(Squad, header = TRUE, fill = TRUE)[[5]]\nSquad2\n\n\n# A tibble: 31 × 32\n   ``             ``    ``    ``    `Playing Time` `Playing Time` `Playing Time`\n   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;         \n 1 Squad          # Pl  Age   Poss  MP             Starts         Min           \n 2 Atlanta Utd    23    29.3  49.1  7              77             630           \n 3 Austin         19    28.2  42.4  7              77             630           \n 4 CF Montréal    23    24.2  51.9  7              77             630           \n 5 Charlotte      18    29.3  50.1  7              77             630           \n 6 Chicago Fire   22    25.9  47.7  7              77             630           \n 7 Colorado Rapi… 24    26.5  45.7  7              77             630           \n 8 Columbus Crew  20    26.6  56.6  7              77             630           \n 9 D.C. United    20    26.1  52.4  7              77             630           \n10 FC Cincinnati  22    27.5  52.3  7              77             630           \n# ℹ 21 more rows\n# ℹ 25 more variables: `Playing Time` &lt;chr&gt;, Performance &lt;chr&gt;,\n#   Performance &lt;chr&gt;, Performance &lt;chr&gt;, Performance &lt;chr&gt;, Performance &lt;chr&gt;,\n#   Performance &lt;chr&gt;, Performance &lt;chr&gt;, Performance &lt;chr&gt;, Expected &lt;chr&gt;,\n#   Expected &lt;chr&gt;, Expected &lt;chr&gt;, Expected &lt;chr&gt;, Progression &lt;chr&gt;,\n#   Progression &lt;chr&gt;, `Per 90 Minutes` &lt;chr&gt;, `Per 90 Minutes` &lt;chr&gt;,\n#   `Per 90 Minutes` &lt;chr&gt;, `Per 90 Minutes` &lt;chr&gt;, `Per 90 Minutes` &lt;chr&gt;, …\n\n\nHide Code\n# Step 4: Keep only relevant columns and clean the data\nSquad2_cleaned &lt;- Squad2 |&gt;\n  row_to_names(row_number = 1) |&gt;   # promotes row 1 to column names\n  clean_names() |&gt;                  # make the column names snake_case\n  select(1:16) |&gt;                   # keep only the first 16 columns\n  filter(squad != \"Squad\") |&gt;       # remove header repeats if any\n  mutate(across(2:16, parse_number))# apply parse_number to cols 2–16\nSquad2_cleaned\n\n\n# A tibble: 30 × 16\n   squad  number_pl   age  poss    mp starts   min  x90s   gls   ast   g_a  g_pk\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Atlan…        23  29.3  49.1     7     77   630     7     9     6    15     8\n 2 Austin        19  28.2  42.4     7     77   630     7     5     5    10     5\n 3 CF Mo…        23  24.2  51.9     7     77   630     7     4     3     7     4\n 4 Charl…        18  29.3  50.1     7     77   630     7    11     6    17    10\n 5 Chica…        22  25.9  47.7     7     77   630     7    14     9    23    13\n 6 Color…        24  26.5  45.7     7     77   630     7     8     5    13     7\n 7 Colum…        20  26.6  56.6     7     77   630     7     9     8    17     9\n 8 D.C. …        20  26.1  52.4     7     77   630     7     9     7    16     8\n 9 FC Ci…        22  27.5  52.3     7     77   630     7     9     4    13     7\n10 FC Da…        20  27.9  44.4     7     77   630     7    10     6    16    10\n# ℹ 20 more rows\n# ℹ 4 more variables: pk &lt;dbl&gt;, p_katt &lt;dbl&gt;, crd_y &lt;dbl&gt;, crd_r &lt;dbl&gt;"
  },
  {
    "objectID": "Mini_Project2.html#creating-a-custom-web-scraping-function",
    "href": "Mini_Project2.html#creating-a-custom-web-scraping-function",
    "title": "",
    "section": "Creating a Custom Web Scraping Function",
    "text": "Creating a Custom Web Scraping Function\nNext, we generalize this scraping process by writing a custom function called scrape_fbref_table(). This function takes in a URL and table number and performs all the cleaning steps automatically. We use it to easily scrape multiple pages later on.\n\n\nHide Code\n# Custom Function\nscrape_fbref_table &lt;- function(url, table_number = 5, n_cols = 16) {\n  page &lt;- read_html(url)\n  tables &lt;- html_nodes(page, \"table\")\n  raw_table &lt;- html_table(tables, fill = TRUE)[[table_number]]\n  \n  cleaned_table &lt;- raw_table |&gt;\n    row_to_names(row_number = 1) |&gt;\n    clean_names() |&gt;\n    select(1:n_cols) |&gt;\n    filter(squad != \"Squad\") |&gt;\n    mutate(across(all_of(2:n_cols), parse_number))\n  \n  return(cleaned_table)\n}\n\nSquad2_cleaned &lt;- scrape_fbref_table(\"https://fbref.com/en/comps/22/Major-League-Soccer-Stats\")\nSquad2_cleaned\n\n\n# A tibble: 30 × 16\n   squad  number_pl   age  poss    mp starts   min  x90s   gls   ast   g_a  g_pk\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Atlan…        23  29.3  49.1     7     77   630     7     9     6    15     8\n 2 Austin        19  28.2  42.4     7     77   630     7     5     5    10     5\n 3 CF Mo…        23  24.2  51.9     7     77   630     7     4     3     7     4\n 4 Charl…        18  29.3  50.1     7     77   630     7    11     6    17    10\n 5 Chica…        22  25.9  47.7     7     77   630     7    14     9    23    13\n 6 Color…        24  26.5  45.7     7     77   630     7     8     5    13     7\n 7 Colum…        20  26.6  56.6     7     77   630     7     9     8    17     9\n 8 D.C. …        20  26.1  52.4     7     77   630     7     9     7    16     8\n 9 FC Ci…        22  27.5  52.3     7     77   630     7     9     4    13     7\n10 FC Da…        20  27.9  44.4     7     77   630     7    10     6    16    10\n# ℹ 20 more rows\n# ℹ 4 more variables: pk &lt;dbl&gt;, p_katt &lt;dbl&gt;, crd_y &lt;dbl&gt;, crd_r &lt;dbl&gt;"
  },
  {
    "objectID": "Mini_Project2.html#iterating-over-multiple-competitions",
    "href": "Mini_Project2.html#iterating-over-multiple-competitions",
    "title": "",
    "section": "Iterating Over Multiple Competitions",
    "text": "Iterating Over Multiple Competitions\nWe used purrr::pmap() to iterate over multiple variables — specifically, league URLs, the table numbers containing the “Squad Standard Stats” table for each competition, and the league names. This allowed us to apply our custom scraping function across multiple soccer leagues, each with its own unique webpage and table structure. This approach demonstrates how iteration over multiple inputs can automate the data collection process across structured but inconsistent sources.\n\n\nHide Code\n# Step 1: Define league names, URLs, and their specific table numbers\nleagues &lt;- tibble::tibble(\n  league = c(\"MLS\", \"Premier_League\", \"La_Liga\", \"Bundesliga\", \"Serie_A\"),\n  url = c(\n    \"https://fbref.com/en/comps/22/Major-League-Soccer-Stats\",\n    \"https://fbref.com/en/comps/9/Premier-League-Stats\",\n    \"https://fbref.com/en/comps/12/La-Liga-Stats\",\n    \"https://fbref.com/en/comps/20/Bundesliga-Stats\",\n    \"https://fbref.com/en/comps/11/Serie-A-Stats\"\n  ),\n  table_number = c(5, 3, 3, 3, 3)  # Specify table index for each league\n)\n\n# Step 2: Scrape each league using map3 to pass 3 arguments\nleague_tables &lt;- pmap(\n  list(leagues$url, leagues$table_number, leagues$league),\n  function(url, table_num, league_name) {\n    scrape_fbref_table(url, table_number = table_num) |&gt; \n      mutate(league = league_name)  # Optionally tag league in each table\n  }\n)\n\n# Step 3: Name each list entry by league\nnames(league_tables) &lt;- leagues$league\n\n# Now each league table is separate and named:\nleague_tables$MLS\n\n\n# A tibble: 30 × 17\n   squad  number_pl   age  poss    mp starts   min  x90s   gls   ast   g_a  g_pk\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Atlan…        23  29.3  49.1     7     77   630     7     9     6    15     8\n 2 Austin        19  28.2  42.4     7     77   630     7     5     5    10     5\n 3 CF Mo…        23  24.2  51.9     7     77   630     7     4     3     7     4\n 4 Charl…        18  29.3  50.1     7     77   630     7    11     6    17    10\n 5 Chica…        22  25.9  47.7     7     77   630     7    14     9    23    13\n 6 Color…        24  26.5  45.7     7     77   630     7     8     5    13     7\n 7 Colum…        20  26.6  56.6     7     77   630     7     9     8    17     9\n 8 D.C. …        20  26.1  52.4     7     77   630     7     9     7    16     8\n 9 FC Ci…        22  27.5  52.3     7     77   630     7     9     4    13     7\n10 FC Da…        20  27.9  44.4     7     77   630     7    10     6    16    10\n# ℹ 20 more rows\n# ℹ 5 more variables: pk &lt;dbl&gt;, p_katt &lt;dbl&gt;, crd_y &lt;dbl&gt;, crd_r &lt;dbl&gt;,\n#   league &lt;chr&gt;\n\n\nHide Code\nleague_tables$Premier_League\n\n\n# A tibble: 20 × 17\n   squad  number_pl   age  poss    mp starts   min  x90s   gls   ast   g_a  g_pk\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Arsen…        24  26.5  56.1    31    341  2790    31    54    43    97    52\n 2 Aston…        28  27.8  51.2    31    341  2790    31    45    36    81    43\n 3 Bourn…        28  25.8  47.5    31    341  2790    31    50    37    87    44\n 4 Brent…        27  26.6  48.1    31    341  2790    31    51    32    83    46\n 5 Brigh…        31  25.6  52.3    31    341  2790    31    47    31    78    44\n 6 Chels…        29  24.4  57.9    31    341  2790    31    53    41    94    50\n 7 Cryst…        29  26.9  44.2    30    330  2700    30    37    29    66    35\n 8 Evert…        26  28.9  40      31    341  2790    31    30    19    49    28\n 9 Fulham        26  28.7  52      31    341  2790    31    46    39    85    43\n10 Ipswi…        32  26.5  41.4    31    341  2790    31    30    22    52    28\n11 Leice…        29  27.3  45.7    31    341  2790    31    25    20    45    23\n12 Liver…        24  27.9  57.8    31    341  2790    31    72    54   126    63\n13 Manch…        29  27.5  61      31    341  2790    31    56    41    97    54\n14 Manch…        29  26.4  52.8    31    341  2790    31    35    23    58    32\n15 Newca…        24  28    50      30    330  2700    30    51    38    89    48\n16 Nott'…        23  26.9  40      31    341  2790    31    50    36    86    47\n17 South…        34  26    50.1    31    341  2790    31    22    14    36    22\n18 Totte…        31  25.9  56.4    31    341  2790    31    55    43    98    53\n19 West …        27  28.8  47.6    31    341  2790    31    33    20    53    30\n20 Wolves        29  27.6  47.8    31    341  2790    31    43    35    78    43\n# ℹ 5 more variables: pk &lt;dbl&gt;, p_katt &lt;dbl&gt;, crd_y &lt;dbl&gt;, crd_r &lt;dbl&gt;,\n#   league &lt;chr&gt;\n\n\nHide Code\nleague_tables$La_Liga\n\n\n# A tibble: 20 × 17\n   squad  number_pl   age  poss    mp starts   min  x90s   gls   ast   g_a  g_pk\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Alavés        29  27.2  45.3    30    330  2700    30    33    18    51    27\n 2 Athle…        30  27.6  49.2    30    330  2700    30    46    36    82    44\n 3 Atlét…        24  29.1  51.8    30    330  2700    30    49    38    87    45\n 4 Barce…        27  25.4  67.3    30    330  2700    30    81    59   140    76\n 5 Betis         35  28.1  51.5    30    330  2700    30    39    24    63    33\n 6 Celta…        30  27.8  54.1    30    330  2700    30    43    30    73    37\n 7 Espan…        26  26    38.5    29    319  2610    29    29    21    50    25\n 8 Getafe        30  28.4  43      30    330  2700    30    30    17    47    25\n 9 Girona        29  28    56.6    30    330  2700    30    36    27    63    32\n10 Las P…        30  27.7  50.1    30    330  2700    30    32    23    55    30\n11 Legan…        26  28.7  42.3    30    330  2700    30    29    21    50    24\n12 Mallo…        28  29.4  46.9    30    330  2700    30    28    19    47    24\n13 Osasu…        24  28.2  46      30    330  2700    30    32    17    49    25\n14 Rayo …        26  29.8  51.3    30    330  2700    30    31    24    55    31\n15 Real …        27  27.6  60.9    30    330  2700    30    63    44   107    54\n16 Real …        31  26    54.1    30    330  2700    30    29    20    49    27\n17 Sevil…        34  26.8  51.4    31    341  2790    31    31    26    57    30\n18 Valen…        32  25.3  47      31    341  2790    31    35    24    59    32\n19 Valla…        35  26.3  43.3    30    330  2700    30    19    12    31    16\n20 Villa…        28  27.6  49.2    29    319  2610    29    49    32    81    44\n# ℹ 5 more variables: pk &lt;dbl&gt;, p_katt &lt;dbl&gt;, crd_y &lt;dbl&gt;, crd_r &lt;dbl&gt;,\n#   league &lt;chr&gt;\n\n\nHide Code\nleague_tables$Bundesliga\n\n\n# A tibble: 18 × 17\n   squad  number_pl   age  poss    mp starts   min  x90s   gls   ast   g_a  g_pk\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Augsb…        29  27.5  43      28    308  2520    28    31    23    54    30\n 2 Bayer…        28  28.5  68.9    28    308  2520    28    78    50   128    69\n 3 Bochum        26  28.8  44      28    308  2520    28    27    20    47    26\n 4 Dortm…        28  27.3  59.9    28    308  2520    28    50    39    89    46\n 5 Eint …        26  25.7  49.9    28    308  2520    28    55    35    90    52\n 6 Freib…        26  28    49      28    308  2520    28    36    27    63    36\n 7 Gladb…        26  27.2  50      28    308  2520    28    44    33    77    41\n 8 Heide…        26  27.6  43.3    28    308  2520    28    32    21    53    27\n 9 Hoffe…        34  27.1  49.5    28    308  2520    28    34    20    54    31\n10 Holst…        27  26.3  44.3    28    308  2520    28    39    23    62    36\n11 Lever…        23  27.8  58.8    28    308  2520    28    61    46   107    59\n12 Mainz…        24  28.2  49.5    28    308  2520    28    44    32    76    41\n13 RB Le…        29  26.3  52.7    29    319  2610    29    45    32    77    43\n14 St. P…        27  27.7  44.5    28    308  2520    28    22    20    42    21\n15 Stutt…        28  25.6  55.7    28    308  2520    28    48    35    83    46\n16 Union…        27  27.9  41      28    308  2520    28    27    18    45    24\n17 Werde…        23  28.3  49.5    28    308  2520    28    44    32    76    42\n18 Wolfs…        26  25.9  46      29    319  2610    29    49    34    83    45\n# ℹ 5 more variables: pk &lt;dbl&gt;, p_katt &lt;dbl&gt;, crd_y &lt;dbl&gt;, crd_r &lt;dbl&gt;,\n#   league &lt;chr&gt;\n\n\nHide Code\nleague_tables$Serie_A\n\n\n# A tibble: 20 × 17\n   squad  number_pl   age  poss    mp starts   min  x90s   gls   ast   g_a  g_pk\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Atala…        32  27.8  55.8    31    341  2790    31    61    42   103    57\n 2 Bolog…        30  27    58.1    31    341  2790    31    50    38    88    44\n 3 Cagli…        26  27.4  45.6    31    341  2790    31    29    23    52    26\n 4 Como          38  27    54.2    31    341  2790    31    34    29    63    34\n 5 Empoli        34  26.2  40.9    31    341  2790    31    23    14    37    21\n 6 Fiore…        34  26.9  49.3    31    341  2790    31    47    31    78    41\n 7 Genoa         34  27.1  45.8    31    341  2790    31    28    21    49    28\n 8 Hella…        32  25.8  38      31    341  2790    31    27    17    44    25\n 9 Inter         25  30.1  59.5    31    341  2790    31    66    50   116    60\n10 Juven…        29  25.4  58.4    31    341  2790    31    45    30    75    40\n11 Lazio         27  27.9  54.2    31    341  2790    31    51    37    88    46\n12 Lecce         30  26.8  44.9    31    341  2790    31    22    17    39    20\n13 Milan         34  26.4  54.4    32    352  2880    32    50    36    86    46\n14 Monza         35  27.6  47.7    31    341  2790    31    24    16    40    21\n15 Napoli        27  29.3  53      31    341  2790    31    45    32    77    41\n16 Parma         32  24.6  45.2    31    341  2790    31    36    26    62    30\n17 Roma          28  27.3  55.4    31    341  2790    31    45    27    72    38\n18 Torino        28  27.4  47.6    31    341  2790    31    33    21    54    32\n19 Udine…        30  27.1  47.3    32    352  2880    32    36    24    60    34\n20 Venez…        36  26.1  44.6    31    341  2790    31    23    12    35    19\n# ℹ 5 more variables: pk &lt;dbl&gt;, p_katt &lt;dbl&gt;, crd_y &lt;dbl&gt;, crd_r &lt;dbl&gt;,\n#   league &lt;chr&gt;\n\n\nWe kept the league tables separate to maintain flexibility in our analysis. This structure allows future us to explore each league individually or easily join the datasets later if a combined analysis across leagues becomes relevant."
  },
  {
    "objectID": "Mini-Project_1_Interactive_Maps.html",
    "href": "Mini-Project_1_Interactive_Maps.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All CodeView Source"
  },
  {
    "objectID": "Mini-Project_1_Interactive_Maps.html#violent-crime-rate-interactive-map-1999",
    "href": "Mini-Project_1_Interactive_Maps.html#violent-crime-rate-interactive-map-1999",
    "title": "",
    "section": "Violent Crime Rate Interactive Map (1999)",
    "text": "Violent Crime Rate Interactive Map (1999)\nExplore how violent crime rates varied across U.S. states in 1999 using this interactive map. Hover over any state to view its crime rate per 100,000 residents.\n\n📘 Source title: More Guns, Less Crime?\n\n🔎 About this data set: Guns documentation\n\n\n\nHide Code\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(stringr)\nlibrary(readr)\nlibrary(htmltools)\n\n# ----------- Violent Crime Rate Map (1999) -----------\n\n# Load and filter Guns dataset for 1999\nGuns_1999 &lt;- read_csv(\"Guns.csv\") |&gt; \n  filter(year == 1999) |&gt; \n  mutate(state = str_to_lower(str_squish(state)))  # Standardize state names\n\n# Load US states geometry data for interactive mapping\nstates_sf &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\") |&gt; \n  select(name, geometry) |&gt; \n  mutate(name = str_to_lower(name))  # Standardize state names\n\n# Merge violent crime data with state geometries\ndata_interactive &lt;- states_sf |&gt; \n  left_join(Guns_1999, by = c(\"name\" = \"state\"))\n\n# Define numeric color scale for violent crime rates\npal_numeric &lt;- colorNumeric(\n  palette = \"magma\", \n  domain = data_interactive$violent, \n  reverse = TRUE,  # Ensures high values are dark, low values are light\n  na.color = \"transparent\"  # Hide missing values instead of coloring them\n)\n\n# Ensure state names are capitalized before using them in tooltips\ndata_interactive &lt;- data_interactive |&gt; \n  mutate(name = str_to_title(name))  # Capitalize state names\n\n# Generate interactive choropleth map for violent crime rates\nleaflet(data_interactive) |&gt; \n  addTiles() |&gt; \n  addPolygons(fillColor = ~pal_numeric(violent),\n              weight = 1, \n              color = \"white\",\n              fillOpacity = 0.7,\n              label = lapply(\n                paste0(\n                  \"&lt;strong&gt;\", data_interactive$name, \"&lt;/strong&gt;&lt;br&gt;\",  # Capitalized state name\n                  \"Violent Crime Rate (1999): &lt;strong&gt;\", data_interactive$violent, \"&lt;/strong&gt; per 100,000\"), HTML),  # Convert text to HTML for proper formatting\n              labelOptions = labelOptions(\n                style = list(\n                  \"font-weight\" = \"normal\", \n                  \"padding\" = \"6px\",\n                  \"background\" = \"rgba(255,255,255,0.8)\",  # Semi-transparent white background\n                  \"border\" = \"1px solid black\",\n                  \"border-radius\" = \"5px\"\n                ),\n                textsize = \"13px\",\n                direction = \"auto\"\n              )) |&gt;\n  addLegend(pal = pal_numeric, \n            values = ~violent, \n            opacity = 0.7, \n            title = \"Violent Crime Rate (1999)\", \n            position = \"bottomright\")\n\n\n\n\n\n\n📝 Insight: States with higher crime rates (darker purple) tend to cluster in the South and Southwest. Many northern states had comparatively lower rates."
  },
  {
    "objectID": "Mini-Project_1_Interactive_Maps.html#seat-belt-law-enforcement-interactive-map-1997",
    "href": "Mini-Project_1_Interactive_Maps.html#seat-belt-law-enforcement-interactive-map-1997",
    "title": "",
    "section": "Seat Belt Law Enforcement Interactive Map (1997)",
    "text": "Seat Belt Law Enforcement Interactive Map (1997)\nThis interactive map shows seat belt law enforcement types in 1997. You can hover over any state to see if they had primary, secondary, or no enforcement at all.\n\n📘 Source title: Effects of Mandatory Seat Belt Laws in the US\n\n🔎 About this data set: US SeatBelts documentation\n\n\n\nHide Code\n# ----------- Seat Belt Law Enforcement Map (1997) -----------\n\n# Load and filter seat belt law data for 1997\nUSSeatBelts_1997 &lt;- read_csv(\"USSeatBelts.csv\") |&gt; \n  filter(year == 1997) |&gt; \n  mutate(state = state.name[match(state, state.abb)],  # Convert abbreviations to full names\n         state = str_to_lower(str_squish(state))) |&gt;  # Standardize state names\n  drop_na(state)  # Ensure valid state names only\n\n# Load US states geometry data for interactive mapping\nstates_sf &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\") |&gt; \n  select(name, geometry) |&gt; \n  mutate(name = str_to_lower(name))  # Standardize state names\n\n# Merge seat belt law data with state geometries\ndata_interactive &lt;- states_sf |&gt; \n  left_join(USSeatBelts_1997, by = c(\"name\" = \"state\")) |&gt; \n  mutate(enforce = replace_na(enforce, \"NA\"))  # Explicitly label missing enforcement data\n\n# Define categorical color mapping for seat belt laws\npal_categorical &lt;- colorFactor(\n  palette = c(\"gray\", \"yellow\", \"blue\", \"red\"),  # Matches static map color scheme\n  domain = c(\"no\", \"primary\", \"secondary\", \"NA\")\n)\n\n# Ensure state names are capitalized before using them in tooltips\ndata_interactive &lt;- data_interactive |&gt; \n  mutate(name = str_to_title(name))  # Capitalize state names\n\n# Generate interactive choropleth map for seat belt law enforcement\nleaflet(data_interactive) |&gt; \n  addTiles() |&gt; \n  addPolygons(fillColor = ~pal_categorical(enforce),\n              weight = 1, \n              color = \"white\",\n              fillOpacity = 0.7,\n              label = lapply(\n                paste0(\n                  \"&lt;strong&gt;\", data_interactive$name, \"&lt;/strong&gt;&lt;br&gt;\",  # Capitalized state name\n                  \"Seat Belt Enforcement: &lt;strong&gt;\", data_interactive$enforce, \"&lt;/strong&gt;\"), HTML),  # Convert text to HTML for proper formatting\n              labelOptions = labelOptions(\n                style = list(\n                  \"font-weight\" = \"normal\", \n                  \"padding\" = \"6px\",\n                  \"background\" = \"rgba(255,255,255,0.8)\",  # Semi-transparent white background\n                  \"border\" = \"1px solid black\",\n                  \"border-radius\" = \"5px\"\n                ),\n                textsize = \"13px\",\n                direction = \"auto\"\n              )) |&gt;\n  addLegend(pal = pal_categorical, \n            values = ~enforce, \n            opacity = 0.7, \n            title = \"Seat Belt Law Enforcement (1997)\", \n            position = \"bottomright\")\n\n\n\n\n\n\n📝 Insight: Secondary enforcement was the dominant seat belt policy in 1997. Only a few states had adopted primary enforcement, and New Hampshire stood out with no enforcement."
  },
  {
    "objectID": "courses.html",
    "href": "courses.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "courses.html#junior-year",
    "href": "courses.html#junior-year",
    "title": "",
    "section": "Junior Year",
    "text": "Junior Year\n\nSpring 2025\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nBIO 242\n\n\nVertebrate Biology\n\n\n\n\nBIO 242\n\n\nVertebrate Biology Lab\n\n\n\n\nBIO 261\n\n\nEcological Principles\n\n\n\n\nBIO 261\n\n\nEcological Principles Lab\n\n\n\n\nPHYS 125\n\n\nPrinciples Physics II\n\n\n\n\nPHYS 125\n\n\nPrinciples Physics II Lab\n\n\n\n\nSDS 264\n\n\nData Science 2\n\n\n\n\n\nJanuary Term 2025\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nCHEM 252\n\n\nOrganometallic Chem\n\n\n\n\n\nFall 2024 to 2025\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nCHEM 255\n\n\nAnalytical Chemistry\n\n\n\n\nCHEM 256\n\n\nAnalytical Lab\n\n\n\n\nID 300\n\n\nOEP Zero-Credit Course\n\n\n\n\nPHYS 124\n\n\nPrinciples Physics I\n\n\n\n\nPHYS 164\n\n\nPrinciples Physics I Lab\n\n\n\n\nSDS 164\n\n\nData Science 1\n\n\n\n\nSDS 272\n\n\nStatistics 2"
  },
  {
    "objectID": "courses.html#sophomore-year",
    "href": "courses.html#sophomore-year",
    "title": "",
    "section": "Sophomore Year",
    "text": "Sophomore Year\n\nSpring 2024\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nBIO 233\n\n\nIntermediate Genetics\n\n\n\n\nBIO 233\n\n\nIntermediate Genetics Lab\n\n\n\n\nCHEM 248\n\n\nOrganic Chemistry II\n\n\n\n\nCHEM 254\n\n\nSynthesis Lab II\n\n\n\n\nPHIL 244\n\n\nPhilosophy of Science\n\n\n\n\nPHIL 258\n\n\nEthics, Economics & the Marketplace\n\n\n\n\n\nJanuary Term 2024\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nPHIL 120\n\n\nPhilosophy in Literature\n\n\n\n\n\nFall 2023 to 2024\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nAS/RE 257\n\n\nBuddhism\n\n\n\n\nBIO 150\n\n\nBiodiversity Foundations\n\n\n\n\nBIO 150\n\n\nBiodiversity Found Lab\n\n\n\n\nCHEM 247\n\n\nOrganic Chemistry I\n\n\n\n\nCHEM 253\n\n\nSynthesis Lab I\n\n\n\n\nPSCI 245\n\n\nAsian Regionalism"
  },
  {
    "objectID": "courses.html#freshman-year",
    "href": "courses.html#freshman-year",
    "title": "",
    "section": "Freshman Year",
    "text": "Freshman Year\n\nSpring 2023\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nCH/BI 227\n\n\nIntegrated Chem/Bio III\n\n\n\n\nCH/BI 227\n\n\nIntegr Chem/Bio III Lab\n\n\n\n\nSOAN 121\n\n\nIntro to Sociology\n\n\n\n\nSTAT 212\n\n\nStatistics for Science\n\n\n\n\nWRIT 120\n\n\nTop: Art, Materiality, Making Asia\n\n\n\n\nWRIT 120\n\n\nSOAR Discussion\n\n\n\n\n\nJanuary Term 2023\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nCH/BI 126\n\n\nIntegrated Chem/Bio II\n\n\n\n\nCH/BI 126\n\n\nIntegrate Chem/Bio II Lab\n\n\n\n\n\nFall 2022 to 2023\n\n\n\nCourse\n\n\nDescription\n\n\n\n\nCH/BI 125\n\n\nIntegrated Chem/Bio I\n\n\n\n\nCH/BI 125\n\n\nIntegrated Chem/Bio I Lab\n\n\n\n\nFYS 120\n\n\nTop: The Making of Modern Science\n\n\n\n\nFYS 120\n\n\nSOAR Discussion\n\n\n\n\nMATH 126\n\n\nCalculus II\n\n\n\n\nPSYCH 125\n\n\nPrinciples: Psych"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n\n\n\n\nTenzin Gyaltsen\nEmail Me   GitHub \n\n\nBiology & Chemistry Major Student  Statistics & Data Science Concentration Student  Junior Student @ St. Olaf College\nGet in Touch\nEmail: gyalts2@stolaf.edu  Address: 1500 St. Olaf Ave, Northfield, MN 55057  Phone: 507-581-2962 \n\n\n\n\n\n\n\n\nTenzin Gyaltsen\nPronouns: He/Him \nHome Country: India    Ethnicity: Tibetan   \nHobbies: Love to ride a bike, listen to music and play table-tennis. \nEducation\nBA in Biology, Chemistry, and Statistics & Data Science\nExpected 2026 | St. Olaf College, US\nBilingual International Baccalaureate Diploma\n2022 | UWC Adriatic International High School, Italy\nMiddle School Graduate\n2018 | TCV School Suja, India\n  Source Code"
  },
  {
    "objectID": "Mini-Project_1_Static_Maps.html",
    "href": "Mini-Project_1_Static_Maps.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All CodeView Source"
  },
  {
    "objectID": "Mini-Project_1_Static_Maps.html#violent-crime-rate-static-map-1999",
    "href": "Mini-Project_1_Static_Maps.html#violent-crime-rate-static-map-1999",
    "title": "",
    "section": "Violent Crime Rate Static Map (1999)",
    "text": "Violent Crime Rate Static Map (1999)\nWhat regions of the U.S. had the highest violent crime rates in 1999?\nThis choropleth map uses color gradients to compare crime rates across all 48 continental states, offering a clear regional overview.\n\n📘 Source title: More Guns, Less Crime?\n\n🔎 About this data set: Guns documentation\n\n\n\nHide Code\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(readr)\n\n# ----------- Violent Crime Rate Map (1999) -----------\n\n# Load and filter Guns dataset for 1999\nGuns_1999 &lt;- read_csv(\"Guns.csv\") |&gt; \n  filter(year == 1999) |&gt; \n  mutate(state = str_to_lower(str_squish(state)))  # Standardize state names for merging\n\n# Load US state boundary data from the maps package\nstates_polygon &lt;- map_data(\"state\") |&gt; \n  as_tibble() |&gt; \n  rename(State = region)  # Ensure naming consistency for merging\n\n# Check for any unmatched states before merging (Excluding Alaska and Hawaii)\nanti_join(Guns_1999, states_polygon, by = c(\"state\" = \"State\"))  \n\n\n# A tibble: 2 × 14\n  rownames  year violent murder robbery prisoners  afam  cauc  male population\n     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1       46  1999    632.    8.6    91.4       413  8.99  60.6  16.6      0.620\n2      276  1999    235     3.7    88.1       307 24.2   26.1  13.7      1.19 \n# ℹ 4 more variables: income &lt;dbl&gt;, density &lt;dbl&gt;, state &lt;chr&gt;, law &lt;chr&gt;\n\n\nHide Code\n# Merge violent crime data with state boundaries\ndata_static &lt;- states_polygon |&gt; \n  left_join(Guns_1999, by = c(\"State\" = \"state\"))\n\n# Generate static choropleth map for violent crime rate\nggplot(data_static, aes(x = long, y = lat, group = group, fill = violent)) +\n  geom_polygon(color = \"black\", linewidth = 0.2) +\n  scale_fill_viridis_c(option = \"magma\", name = \"Violent Crime Rate\", direction = -1) +\n  coord_map() + \n  theme_void() +\n  labs(title = \"Violent Crime Rate per 100,000 (1999)\",\n       caption = \"Source: Guns dataset\")\n\n\n\n\n\n\n\n\n\n\nAlt-text:\nThis choropleth map displays the violent crime rate per 100,000 population across U.S. states in 1999. The x-axis represents longitude, and the y-axis represents latitude, outlining the U.S. state boundaries, while the color scale represents crime rates, ranging from light yellow (0-400 per 100,000) to dark purple (1,600+ per 100,000). The highest violent crime rates (dark purple) are concentrated in southern states like South Carolina, Florida and Louisiana, as well as parts of the Southwest like New Mexico. In contrast, the lowest crime rates (light yellow) appear in northern and midwestern states, including North Dakota, Maine, and Vermont. Most states exhibit moderate crime rates (orange to red), with a regional pattern suggesting that violent crime was generally higher in the South and Southwest and lower in the North. This visualization helps compare crime rates geographically, revealing clear regional differences."
  },
  {
    "objectID": "Mini-Project_1_Static_Maps.html#seat-belt-law-enforcement-static-map-1997",
    "href": "Mini-Project_1_Static_Maps.html#seat-belt-law-enforcement-static-map-1997",
    "title": "",
    "section": "Seat Belt Law Enforcement Static Map (1997)",
    "text": "Seat Belt Law Enforcement Static Map (1997)\nHow were seat belt laws enforced across states in 1997? This map highlights state-level differences in law enforcement types and identifies outliers like New Hampshire.\n\n📘 Source title: Effects of Mandatory Seat Belt Laws in the US\n\n🔎 About this data set: US SeatBelts documentation\n\n\n\nHide Code\n# ----------- Seat Belt Law Enforcement Map (1997) -----------\n\n# Load and filter seat belt law enforcement data for 1997\nUSSeatBelts_1997 &lt;- read_csv(\"USSeatBelts.csv\") |&gt; \n  filter(year == 1997) |&gt; \n  mutate(state = state.name[match(state, state.abb)],  \n         # Convert state abbreviations to full names\n         state = str_to_lower(str_squish(state))) |&gt;  \n  # Standardize state names for merging\n  drop_na(state)  # Ensure all state names are valid before merging\n\n# Load US state boundary data\nstates_polygon &lt;- map_data(\"state\") |&gt; \n  as_tibble() |&gt; \n  rename(State = region)\n\n# Check for any unmatched states before merging (Excluding Alaska and Hawaii)\nanti_join(USSeatBelts_1997, states_polygon, by = c(\"state\" = \"State\"))  \n\n\n# A tibble: 2 × 13\n  rownames state   year miles fatalities seatbelt speed65 speed70 drinkage\n     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   \n1       15 alaska  1997  4387     0.0176    0.690 yes     no      yes     \n2      180 hawaii  1997  7947     0.0165    0.800 no      no      yes     \n# ℹ 4 more variables: alcohol &lt;chr&gt;, income &lt;dbl&gt;, age &lt;dbl&gt;, enforce &lt;chr&gt;\n\n\nHide Code\n# Merge seat belt law enforcement data with state boundaries\ndata_static &lt;- states_polygon |&gt; \n  left_join(USSeatBelts_1997, by = c(\"State\" = \"state\")) |&gt; \n  mutate(enforce = replace_na(enforce, \"NA\"))  # Explicitly label missing enforcement data\n\n# Define categorical color mapping for seat belt laws\nenforce_colors &lt;- c(\"no\" = \"yellow\", \n                    \"primary\" = \"blue\", \n                    \"secondary\" = \"red\", \n                    \"NA\" = \"gray\")  # Custom color scheme\n\n# Generate static choropleth map for seat belt law enforcement\nggplot(data_static, aes(x = long, y = lat, group = group, fill = enforce)) +\n  geom_polygon(color = \"black\", linewidth = 0.2) +\n  scale_fill_manual(values = enforce_colors, name = \"Enforcement\", na.value = \"gray\") +\n  coord_map() + \n  theme_void() +\n  labs(title = \"Seat Belt Law Enforcement by State (1997)\",\n       caption = \"Source: USSeatBelts dataset\")\n\n\n\n\n\n\n\n\n\n\nAlt-text:\nThis choropleth map displays seat belt law enforcement classifications across U.S. states in 1997. The x-axis represents longitude, and the y-axis represents latitude, defining U.S. state boundaries, while the color scale represents the type of seat belt law enforcement. The categories include yellow for “no enforcement”, blue for “primary enforcement”, red for “secondary enforcement”, and gray for missing data (NA). Most states are red, indicating secondary enforcement, while primary enforcement (blue) is concentrated in a few states, such as Oregon, New Mexico, Texas, and New York. Surprisingly, New Hampshire is the only state with no enforcement (yellow) in this year. The geographic distribution suggests that in 1997, secondary enforcement was the dominant policy, with primary enforcement laws less common and regionally scattered. This map helps visualize the state-level differences in seat belt law enforcement during that year."
  }
]